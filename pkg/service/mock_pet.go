// Code generated by MockGen. DO NOT EDIT.
// Source: alecgibson.ca/go-postgres-petstore/pkg/service (interfaces: Pet)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	db "alecgibson.ca/go-postgres-petstore/pkg/infrastructure/db"
	gomock "github.com/golang/mock/gomock"
)

// MockPet is a mock of Pet interface.
type MockPet struct {
	ctrl     *gomock.Controller
	recorder *MockPetMockRecorder
}

// MockPetMockRecorder is the mock recorder for MockPet.
type MockPetMockRecorder struct {
	mock *MockPet
}

// NewMockPet creates a new mock instance.
func NewMockPet(ctrl *gomock.Controller) *MockPet {
	mock := &MockPet{ctrl: ctrl}
	mock.recorder = &MockPetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPet) EXPECT() *MockPetMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPet) Create(arg0 context.Context, arg1 string, arg2 *string) (db.PetstorePet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.PetstorePet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPet)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPet) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPet)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockPet) FindAll(arg0 context.Context, arg1 *[]string, arg2 *int32) ([]db.PetstorePet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]db.PetstorePet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPetMockRecorder) FindAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPet)(nil).FindAll), arg0, arg1, arg2)
}

// FindByID mocks base method.
func (m *MockPet) FindByID(arg0 context.Context, arg1 int64) (db.PetstorePet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(db.PetstorePet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPetMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPet)(nil).FindByID), arg0, arg1)
}
