// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+c98bYshMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

